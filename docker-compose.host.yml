# Docker Compose with Host Networking (Linux only)
# Use with: docker compose -f docker-compose.host.yml up

services:
  # PostgreSQL Database für Keycloak
  postgres-keycloak:
    image: postgres:16
    container_name: family-postgres-keycloak-host
    network_mode: host
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      PGPORT: 5433  # Different port to avoid conflict
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data

  # PostgreSQL Database für Family Application
  postgres-app:
    image: postgres:16
    container_name: family-postgres-app-host
    network_mode: host
    environment:
      POSTGRES_DB: family
      POSTGRES_USER: family
      POSTGRES_PASSWORD: family
      PGPORT: 5432
    volumes:
      - postgres_app_data:/var/lib/postgresql/data

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: family-keycloak-host
    network_mode: host
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://localhost:5433/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: 8080
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      KC_HOSTNAME_STRICT: "false"
    depends_on:
      - postgres-keycloak
    command: start-dev --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: family-redis-host
    network_mode: host
    command: redis-server --appendonly yes --port 6379
    volumes:
      - redis_data:/data

  # Zookeeper für Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: family-zookeeper-host
    network_mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: family-kafka-host
    network_mode: host
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: localhost:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1

  # Family API
  family-api:
    build:
      context: .
      dockerfile: src/api/Family.Api/Dockerfile
    container_name: family-api-host
    network_mode: host
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8081
      ConnectionStrings__DefaultConnection: "Host=localhost;Database=family;Username=family;Password=family"
      Keycloak__Authority: "http://localhost:8080/realms/family"
      Keycloak__Audience: "family-api"
      Cache__RedisConnectionString: "localhost:6379"
      Kafka__BootstrapServers: "localhost:9092"
    depends_on:
      - postgres-app
      - redis
      - kafka
    profiles:
      - api
      - full-stack

  # Family Web Frontend
  family-web:
    build:
      context: ./src/frontend/web
      dockerfile: Dockerfile
    container_name: family-web-host
    network_mode: host
    environment:
      - NODE_ENV=production
      - PORT=4200
    profiles:
      - full-stack

volumes:
  postgres_keycloak_data:
  postgres_app_data:
  redis_data:
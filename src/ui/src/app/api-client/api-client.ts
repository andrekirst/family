//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    register(body: RegistrationRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: AuthenticationRequest | undefined): Promise<AuthenticationResponse> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<AuthenticationResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AuthenticationResponse>(null as any);
    }

    /**
     * @param idToken (optional) 
     * @return OK
     */
    linkGoogleAccount(idToken: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Auth/link-google-account?";
        if (idToken === null)
            throw new Error("The parameter 'idToken' cannot be null.");
        else if (idToken !== undefined)
            url_ += "idToken=" + encodeURIComponent("" + idToken) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLinkGoogleAccount(_response);
        });
    }

    protected processLinkGoogleAccount(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param code (optional) 
     * @return OK
     */
    signinGoogle(code: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/signin-google?";
        if (code === null)
            throw new Error("The parameter 'code' cannot be null.");
        else if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSigninGoogle(_response);
        });
    }

    protected processSigninGoogle(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    familyMemberAll(): Promise<GetFamilyMembersQueryDto[]> {
        let url_ = this.baseUrl + "/api/core/FamilyMember";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFamilyMemberAll(_response);
        });
    }

    protected processFamilyMemberAll(response: Response): Promise<GetFamilyMembersQueryDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetFamilyMembersQueryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetFamilyMembersQueryDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    familyMemberPOST(body: CreateFamilyMemberCommandModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/core/FamilyMember";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFamilyMemberPOST(_response);
        });
    }

    protected processFamilyMemberPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    familyMemberPUT(id: string, body: UpdateFamilyMemberCommandModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/core/FamilyMember/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFamilyMemberPUT(_response);
        });
    }

    protected processFamilyMemberPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    isInstalled(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Installation/is-installed";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsInstalled(_response);
        });
    }

    protected processIsInstalled(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    install(body: InstallationOptions | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Installation/install";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processInstall(_response);
        });
    }

    protected processInstall(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param value (optional) 
     * @return OK
     */
    search(value: string | undefined): Promise<SearchResult[]> {
        let url_ = this.baseUrl + "/api/Search?";
        if (value === null)
            throw new Error("The parameter 'value' cannot be null.");
        else if (value !== undefined)
            url_ += "value=" + encodeURIComponent("" + value) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearch(_response);
        });
    }

    protected processSearch(response: Response): Promise<SearchResult[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SearchResult[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    weightTrackingPOST(familyMemberId: string, body: CreateWeightTrackingEntryCommandModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/body/familymember/{familyMemberId}/WeightTracking";
        if (familyMemberId === undefined || familyMemberId === null)
            throw new Error("The parameter 'familyMemberId' must be defined.");
        url_ = url_.replace("{familyMemberId}", encodeURIComponent("" + familyMemberId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeightTrackingPOST(_response);
        });
    }

    protected processWeightTrackingPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    weightTrackingPUT(id: string, familyMemberId: string, body: UpdateWeightTrackingEntryCommandModel | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/body/familymember/{familyMemberId}/WeightTracking/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (familyMemberId === undefined || familyMemberId === null)
            throw new Error("The parameter 'familyMemberId' must be defined.");
        url_ = url_.replace("{familyMemberId}", encodeURIComponent("" + familyMemberId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeightTrackingPUT(_response);
        });
    }

    protected processWeightTrackingPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    weightTrackingDELETE(id: string, familyMemberId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/body/familymember/{familyMemberId}/WeightTracking/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (familyMemberId === undefined || familyMemberId === null)
            throw new Error("The parameter 'familyMemberId' must be defined.");
        url_ = url_.replace("{familyMemberId}", encodeURIComponent("" + familyMemberId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processWeightTrackingDELETE(_response);
        });
    }

    protected processWeightTrackingDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class AuthenticationRequest implements IAuthenticationRequest {
    login?: string | undefined;
    password?: string | undefined;

    constructor(data?: IAuthenticationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.login = _data["login"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthenticationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["login"] = this.login;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuthenticationRequest {
    login?: string | undefined;
    password?: string | undefined;
}

export class AuthenticationResponse implements IAuthenticationResponse {
    username?: string | undefined;
    email?: string | undefined;
    token?: string | undefined;

    constructor(data?: IAuthenticationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.email = _data["email"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): AuthenticationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["email"] = this.email;
        data["token"] = this.token;
        return data;
    }
}

export interface IAuthenticationResponse {
    username?: string | undefined;
    email?: string | undefined;
    token?: string | undefined;
}

export class CreateFamilyMemberCommandModel implements ICreateFamilyMemberCommandModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date;
    aspNetUserId?: string | undefined;

    constructor(data?: ICreateFamilyMemberCommandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.aspNetUserId = _data["aspNetUserId"];
        }
    }

    static fromJS(data: any): CreateFamilyMemberCommandModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFamilyMemberCommandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["aspNetUserId"] = this.aspNetUserId;
        return data;
    }
}

export interface ICreateFamilyMemberCommandModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date;
    aspNetUserId?: string | undefined;
}

export class CreateWeightTrackingEntryCommandModel implements ICreateWeightTrackingEntryCommandModel {
    measuredAt?: Date;
    weightUnit?: WeightUnit;
    weight?: number;

    constructor(data?: ICreateWeightTrackingEntryCommandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.measuredAt = _data["measuredAt"] ? new Date(_data["measuredAt"].toString()) : <any>undefined;
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): CreateWeightTrackingEntryCommandModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWeightTrackingEntryCommandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["measuredAt"] = this.measuredAt ? this.measuredAt.toISOString() : <any>undefined;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        return data;
    }
}

export interface ICreateWeightTrackingEntryCommandModel {
    measuredAt?: Date;
    weightUnit?: WeightUnit;
    weight?: number;
}

export class GetFamilyMembersQueryDto implements IGetFamilyMembersQueryDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;

    constructor(data?: IGetFamilyMembersQueryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthDate = _data["birthDate"] ? new Date(_data["birthDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetFamilyMembersQueryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFamilyMembersQueryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGetFamilyMembersQueryDto {
    id?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthDate?: Date | undefined;
}

export class InstallationOptions implements IInstallationOptions {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IInstallationOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): InstallationOptions {
        data = typeof data === 'object' ? data : {};
        let result = new InstallationOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        return data;
    }
}

export interface IInstallationOptions {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export enum ObjectType {
    FamilyMember = "FamilyMember",
}

export class RegistrationRequest implements IRegistrationRequest {
    firstName!: string;
    lastName!: string;
    birthdate!: Date;
    email!: string;
    username!: string;
    password!: string;

    constructor(data?: IRegistrationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
            this.email = _data["email"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegistrationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        data["email"] = this.email;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegistrationRequest {
    firstName: string;
    lastName: string;
    birthdate: Date;
    email: string;
    username: string;
    password: string;
}

export class SearchResult implements ISearchResult {
    valueId?: string;
    title?: string | undefined;
    objectType?: ObjectType;

    constructor(data?: ISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.valueId = _data["valueId"];
            this.title = _data["title"];
            this.objectType = _data["objectType"];
        }
    }

    static fromJS(data: any): SearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["valueId"] = this.valueId;
        data["title"] = this.title;
        data["objectType"] = this.objectType;
        return data;
    }
}

export interface ISearchResult {
    valueId?: string;
    title?: string | undefined;
    objectType?: ObjectType;
}

export class UpdateFamilyMemberCommandModel implements IUpdateFamilyMemberCommandModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date;

    constructor(data?: IUpdateFamilyMemberCommandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.birthdate = _data["birthdate"] ? new Date(_data["birthdate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateFamilyMemberCommandModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateFamilyMemberCommandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["birthdate"] = this.birthdate ? this.birthdate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateFamilyMemberCommandModel {
    firstName?: string | undefined;
    lastName?: string | undefined;
    birthdate?: Date;
}

export class UpdateWeightTrackingEntryCommandModel implements IUpdateWeightTrackingEntryCommandModel {
    measuredAt?: Date;
    weightUnit?: WeightUnit;
    weight?: number;

    constructor(data?: IUpdateWeightTrackingEntryCommandModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.measuredAt = _data["measuredAt"] ? new Date(_data["measuredAt"].toString()) : <any>undefined;
            this.weightUnit = _data["weightUnit"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): UpdateWeightTrackingEntryCommandModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWeightTrackingEntryCommandModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["measuredAt"] = this.measuredAt ? this.measuredAt.toISOString() : <any>undefined;
        data["weightUnit"] = this.weightUnit;
        data["weight"] = this.weight;
        return data;
    }
}

export interface IUpdateWeightTrackingEntryCommandModel {
    measuredAt?: Date;
    weightUnit?: WeightUnit;
    weight?: number;
}

export enum WeightUnit {
    Kilogram = "Kilogram",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}